# finally done pushing the images to ECR
name: "test1"

on:
  schedule:
    - cron: "0 0 * * *"  # 12AM UTC
  workflow_dispatch:

jobs:
  build-push-test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      IMAGE_TAG: latest
      SOURCE_REPO_URL: https://github.com/Sufiyan11919/crud-react-node-mySQL-go.git
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_BACKEND: my-app-backend
      ECR_REPO_FRONTEND: my-app-frontend

    steps:
      # 1) Checkout the repository
      - name: Checkout Source
        uses: actions/checkout@v4
     
      - name: List repository contents
        run: ls -la  

      # 2) Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # 3) Launch ephemeral EC2
      - name: Launch Temporary EC2 for Build/Test
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \
            --count 1 \
            --instance-type t2.micro \
            --key-name myKey \
            --security-group-ids sg-0bb71744d70b0efab \
            --subnet-id subnet-0e90ef3332a0cd56d \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Ephemeral INSTANCE_ID: $INSTANCE_ID"

          # Wait for instance to be running
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "EC2 is now running. Sleeping 15s to let networking come up..."
          sleep 15

          # Set the instance_id as a step output
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      # 4) Set up SSH Key
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem

      # 5) Fetch EC2 Public DNS and IP
      - name: Fetch Ephemeral EC2 Hostname
        id: get_temp_ec2
        run: |
          INSTANCE_ID="${{ steps.launch_ec2.outputs.instance_id }}"

          PUBLIC_DNS=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          echo "public_dns=$PUBLIC_DNS" >> $GITHUB_OUTPUT

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

          echo "Ephemeral EC2 Hostname (DNS): $PUBLIC_DNS"
          echo "Ephemeral EC2 Public IP: $PUBLIC_IP"

      # 6) Install Docker on EC2
      - name: Install Docker on Ephemeral EC2
        run: |
          TEMP_HOST="${{ steps.get_temp_ec2.outputs.public_dns }}"
          echo "🔑 SSHing into ephemeral EC2 at $TEMP_HOST to install Docker..."

          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@"$TEMP_HOST" << EOF
            set -e
            echo "connected"
            sudo yum update -y
            sudo yum install -y docker git jq
            sudo service docker start
            sudo usermod -aG docker ec2-user

            # Install Docker Compose
            sudo curl -L \
              "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            echo "Docker version:"
            docker --version
            echo "Docker Compose version:"
            docker-compose --version

            # Create environment files directory for future use
            mkdir -p ~/env_files
          EOF

      # 7) Deploy Application on EC2 (start containers)
      - name: Deploy Application on EC2
        run: |
          TEMP_HOST="${{ steps.get_temp_ec2.outputs.public_dns }}"
          echo "🔑 SSHing into ephemeral EC2 at $TEMP_HOST to deploy application..."
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@"$TEMP_HOST" << EOF
            set -e
            echo "Cloning source repository..."
            git clone $SOURCE_REPO_URL app
            cd app
            echo "Starting containers using docker-compose.test.yml..."
            docker-compose -f docker-compose.test.yml up -d
          EOF

      # 8) Check container logs (debug step) - FIXED
      - name: Check container logs (debug step)
        run: |
          TEMP_HOST="${{ steps.get_temp_ec2.outputs.public_dns }}"
          echo "🔍 Fetching Docker logs to see if there's a DB or backend error..."

          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@"$TEMP_HOST" << EOF
            #!/usr/bin/env bash
            set -e

            echo "=== Docker PS ==="
            docker ps

            echo ""
            echo "=== MySQL Container Logs ==="
            MYSQL_CID=\$(docker ps --filter "ancestor=mysql:8" --format "{{.ID}}")
            if [ -n "\$MYSQL_CID" ]; then
            docker logs "\$MYSQL_CID" || true
            else
            echo "No MySQL container found."
            fi

            echo ""
            echo "=== Backend Container Logs ==="
            BACKEND_CID=\$(docker ps --filter "name=backend" --format "{{.ID}}")
            if [ -n "\$BACKEND_CID" ]; then
            docker logs "\$BACKEND_CID" || true
            else
            echo "No backend container found."
            fi
          EOF

      # 9) Smoke Test with multiple retries
      - name: Smoke Test on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ steps.get_temp_ec2.outputs.public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            echo "Sleeping 30s initial buffer..."
            sleep 30

            echo "Attempting POST /books up to 6 times..."
            for i in {1..6}; do
              echo "Try #$i..."
              response=$(curl -s -X POST -H "Content-Type: application/json" -d '{
                "title": "New Book",
                "description": "This is a test book",
                "price": 10.99,
                "cover": "https://example.com/book-cover.jpg"
              }' http://${{ steps.get_temp_ec2.outputs.public_ip }}:8800/books || true)
              
              echo "Response: $response"
              if [[ "$response" == *"Book has been created successfully!"* ]]; then
                echo "Smoke test passed: expected response received"
                exit 0
              fi

              echo "Backend not ready or unexpected response. Sleeping 10s..."
              sleep 10
            done

            echo "Smoke test failed after multiple attempts."
            exit 1

      # 10) Build and Push images to ECR if tests pass
      - name: Log in to ECR
        if: success()
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # 11) Clone Source Repository for Build
      - name: Clone Source Repository
        if: success()
        run: |
          git clone $SOURCE_REPO_URL source
          ls -la source
            
        # 12) Build and Push Backend
      - name: Build and Push Backend
        if: success()
        run: |
          # Generate timestamp tag (YYYYMMDDHHMMSS)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "TIMESTAMP tag: $TIMESTAMP"
          ls -la
          cd source/backend
          docker build -t my-backend-local:latest .
          # Tag as latest and with backend-timestamp
          docker tag my-backend-local:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG
          docker tag my-backend-local:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:backend-$TIMESTAMP
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:backend-$TIMESTAMP


        # 13) Build and Push Frontend
      - name: Build and Push Frontend
        if: success()
        run: |
          # Generate timestamp tag (YYYYMMDDHHMMSS)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "TIMESTAMP tag: $TIMESTAMP"
          ls -la
          cd source/frontend
          docker build -t my-frontend-local:latest .
          # Tag as latest and with frontend-timestamp
          docker tag my-frontend-local:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG
          docker tag my-frontend-local:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:frontend-$TIMESTAMP
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:frontend-$TIMESTAMP

      # 14) Terminate the EC2 instance
      - name: Terminate EC2
        if: always()
        run: |
          INSTANCE_ID="${{ steps.launch_ec2.outputs.instance_id }}"
          if [ -n "$INSTANCE_ID" ]; then
            echo "Terminating EC2 instance $INSTANCE_ID..."
            aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
            aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID"
            echo "Instance terminated."
          fi
        
     # 15) Update QA Deployment on QA-EC2 (pull latest images and restart)
      - name: Update QA Deployment on QA-EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
            host: ${{ secrets.QA_EC2_IP }}
            username: ec2-user
            key: ${{ secrets.EC2_SSH_KEY }}
            script: |
                cd crud-react-node-mySQL-go   
                echo "Bringing down current deployment..."
                docker-compose down --rmi all
                docker system prune -a
                echo "Pulling latest images from ECR..."
                # docker-compose pull
                echo "Starting updated deployment..."
                docker-compose --env-file .env.qa -f docker-compose.yml -f docker-compose.qa.yml up -d

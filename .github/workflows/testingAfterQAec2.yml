name: "Nightly Build & Test"

on:
  schedule:
    - cron: "0 0 * * *"  # Runs nightly at midnight UTC
  workflow_dispatch:

jobs:
  build-push-test:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 120717612929
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      ECR_REPO_BACKEND: my-app-backend
      ECR_REPO_FRONTEND: my-app-frontend
      IMAGE_TAG: latest

    steps:
      # 1Ô∏è‚É£ Checkout Source
      - name: Checkout Source
        uses: actions/checkout@v2
        with:
          repository: Sufiyan11919/crud-react-node-mySQL-go
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2Ô∏è‚É£ Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      # 3Ô∏è‚É£ Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS \
            --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

      # 4Ô∏è‚É£ Build & Push Backend Image
      - name: Build Backend
        run: |
          cd backend
          docker build -t $ECR_REPO_BACKEND:$IMAGE_TAG .
          docker tag $ECR_REPO_BACKEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG

      - name: Push Backend
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG

      # 5Ô∏è‚É£ Build & Push Frontend Image
      - name: Build Frontend
        run: |
          cd frontend
          docker build -t $ECR_REPO_FRONTEND:$IMAGE_TAG .
          docker tag $ECR_REPO_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG

      - name: Push Frontend
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG

      # 6Ô∏è‚É£ Launch an EC2 instance
      - name: Launch EC2
        id: launch_ec2
        run: |
          AMI_ID="ami-09940406aa41815f0"
          INSTANCE_TYPE="t2.micro"
          SECURITY_GROUP_ID="sg-0bb71744d70b0efab"
          KEY_PAIR_NAME="myTempKeyPair"

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id "$AMI_ID" \
            --instance-type "$INSTANCE_TYPE" \
            --key-name "$KEY_PAIR_NAME" \
            --security-group-ids "$SECURITY_GROUP_ID" \
            --count 1 \
            --region us-east-1 \
            --query "Instances[0].InstanceId" --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID" --region us-east-1
          echo "Instance $INSTANCE_ID is now running."

          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text --region us-east-1)

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Instance running at $PUBLIC_IP"

      # 7Ô∏è‚É£ Setup SSH Key
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem

      - name: Wait for SSH
        run: sleep 60

      # 8Ô∏è‚É£ SSH into EC2, set AWS credentials, pull ECR images, and run tests
      - name: Deploy & Test
        run: |
            ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} << EOF
            set -e

            echo "Setting AWS credentials..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_REGION="us-east-1"
            export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}  # ‚úÖ Ensure AWS_ACCOUNT_ID is available

            echo "Logging into AWS ECR..."
            aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin \$AWS_ACCOUNT_ID.dkr.ecr.\$AWS_REGION.amazonaws.com

            echo "Cloning the application repo..."
            git clone https://github.com/Sufiyan11919/crud-react-node-mySQL-go.git app
            cd app

            echo "Pulling images from ECR..."
            docker-compose -f docker-compose.test.yml pull

            echo "Starting Docker environment..."
            docker-compose -f docker-compose.test.yml up -d
            sleep 10
            docker ps

            echo "Running smoke tests..."
            curl -o /dev/null -s -w "%{http_code}\n" http://localhost:5173/ | grep -q 200 || exit 1
            echo "‚úÖ Test completed successfully for displaying frontend main page!"

            curl -o /dev/null -s -w "%{http_code}\n" http://localhost:8800/ | grep -q 200 || exit 1
            echo "‚úÖ Test completed successfully for backend root!"
            
            curl -o /dev/null -s -w "%{http_code}\n" http://localhost:8800/books | grep -q 200 || exit 1
            echo "‚úÖ Test completed successfully for fetching books!"
            EOF

      # 9Ô∏è‚É£ Remove ECR images if test fails
      - name: Remove ECR Images on Failure
        if: failure()
        run: |
          echo "Tests failed. Removing images from ECR..."
          aws ecr batch-delete-image --repository-name $ECR_REPO_BACKEND --image-ids imageTag=$IMAGE_TAG --region us-east-1
          aws ecr batch-delete-image --repository-name $ECR_REPO_FRONTEND --image-ids imageTag=$IMAGE_TAG --region us-east-1

      # üîü Terminate ephemeral EC2
      - name: Terminate EC2
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }} --region us-east-1
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }} --region us-east-1
          echo "EC2 instance terminated."

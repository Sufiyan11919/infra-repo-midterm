name: "Nightly Build & Test"

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  build-push-test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 120717612929
      ECR_REPO_BACKEND: my-app-backend
      ECR_REPO_FRONTEND: my-app-frontend
      IMAGE_TAG: latest

    steps:
      # 1) Checkout source
      - name: Checkout Source
        uses: actions/checkout@v2
        with:
          repository: Sufiyan11919/crud-react-node-mySQL-go
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2) AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # 3) Login to ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS \
            --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # 4) Build & Push Backend
      - name: Build Backend
        run: |
          cd backend
          docker build -t $ECR_REPO_BACKEND:$IMAGE_TAG .
          docker tag $ECR_REPO_BACKEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG

      - name: Push Backend
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG

      # 5) Build & Push Frontend
      - name: Build Frontend
        run: |
          cd frontend
          docker build -t $ECR_REPO_FRONTEND:$IMAGE_TAG .
          docker tag $ECR_REPO_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG

      - name: Push Frontend
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG

      # 6) Launch a temporary EC2 instance (using a pre-existing key pair)
      - name: Launch EC2
        id: launch_ec2
        run: |
          AMI_ID="ami-09940406aa41815f0"
          INSTANCE_TYPE="t2.micro"
          SECURITY_GROUP_ID="sg-0bb71744d70b0efab"
          KEY_PAIR_NAME="myExistingKeyPair"  # <-- Put your real key pair name here

          CREATE_OUTPUT=$(aws ec2 run-instances \
            --image-id "$AMI_ID" \
            --instance-type "$INSTANCE_TYPE" \
            --key-name "$KEY_PAIR_NAME" \
            --security-group-ids "$SECURITY_GROUP_ID" \
            --count 1)
          
          INSTANCE_ID=$(echo "$CREATE_OUTPUT" | jq -r '.Instances[0].InstanceId')
          echo "Instance ID: $INSTANCE_ID"

          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "Instance $INSTANCE_ID is now running."

          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Public IP: $PUBLIC_IP"

          # Output for next steps
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      # 7) Setup Key from GitHub Secret
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem

      - name: Wait for SSH
        run: sleep 60

      # 8) Deploy & Test in Ephemeral EC2
      - name: Deploy & Test
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ steps.launch_ec2.outputs.public_ip }}
          username: ec2-user
          key: |
            ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # Clone your repo to get docker-compose.test.yml
            git clone https://github.com/Sufiyan11919/crud-react-node-mySQL-go.git app
            cd app

            # Docker login again on ephemeral EC2
            echo "Logging into ECR on ephemeral EC2..."
            aws ecr get-login-password --region us-east-1 \
              | docker login --username AWS \
              --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

            echo "Pulling images from ECR..."
            docker-compose -f docker-compose.test.yml pull

            echo "Starting ephemeral environment..."
            docker-compose -f docker-compose.test.yml up -d

      # 9) Smoke Test
      - name: Smoke Test with cURL
        run: |
          set -e
          IP="${{ steps.launch_ec2.outputs.public_ip }}"
          echo "Waiting 20s for containers to start..."
          sleep 20

          echo "POST a new book..."
          curl -X POST -H "Content-Type: application/json" \
            -d '{"title":"Nightly Book","description":"From GitHub Actions","price":10.50,"cover":"https://via.placeholder.com/150"}' \
            http://$IP:8800/books

          echo "GET all books..."
          curl http://$IP:8800/books

      # 10) Remove ECR images if tests fail
      - name: Remove ECR Images on Failure
        if: failure()
        run: |
          echo "Tests failed. Removing images from ECR..."
          aws ecr batch-delete-image --repository-name $ECR_REPO_BACKEND --image-ids imageTag=$IMAGE_TAG
          aws ecr.batch-delete-image --repository-name $ECR_REPO_FRONTEND --image-ids imageTag=$IMAGE_TAG

      # 11) Terminate ephemeral EC2
      - name: Terminate EC2
        if: always()
        run: |
          INSTANCE_ID="${{ steps.launch_ec2.outputs.instance_id }}"
          if [ -n "$INSTANCE_ID" ]; then
            echo "Terminating EC2 instance $INSTANCE_ID..."
            aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
            aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID"
            echo "Instance terminated."
          fi


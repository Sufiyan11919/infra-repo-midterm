name: "new"

on:
  workflow_dispatch:

jobs:
  build-push-test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 120717612929
      ECR_REPO_BACKEND: my-app-backend
      ECR_REPO_FRONTEND: my-app-frontend
      IMAGE_TAG: latest

    steps:
      # 1) Checkout the source repository (which contains backend, frontend, docker-compose.yml)
      - name: Checkout Source Repository
        uses: actions/checkout@v3
        with:
          repository: Sufiyan11919/crud-react-node-mySQL-go
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2) Configure AWS Credentials (using session token)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # 3) Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # 4) Build the Backend Docker image
      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build -t $ECR_REPO_BACKEND:$IMAGE_TAG .
          docker tag $ECR_REPO_BACKEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG

      # 5) Build the Frontend Docker image
      - name: Build Frontend Docker Image
        run: |
          cd frontend
          docker build -t $ECR_REPO_FRONTEND:$IMAGE_TAG .
          docker tag $ECR_REPO_FRONTEND:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG

      # 6) Push the Backend image to ECR
      - name: Push Backend Image to ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG

      # 7) Push the Frontend image to ECR
      - name: Push Frontend Image to ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG

      # Launch a temporary EC2 instance for smoke testing
      - name: Launch Temporary EC2 for Smoke Test
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-053a45fff0a704a47 \
            --count 1 \
            --instance-type t2.micro \
            --key-name ec2TestInstanceKey \
            --security-group-ids sg-06ed8968a7a3ec08f \
            --subnet-id subnet-058dd85267834457a \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID  # Wait for the instance to start
          sleep 10  # Allow additional time for instance setup

      # Set up SSH key for EC2 access
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem

      # Pull images onto the EC2 instance and run smoke tests
      - name: Pull Images on Temporary EC2 and Run Smoke Tests
        run: |
          # Get the public DNS of the instance
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          echo "PUBLIC_DNS=$PUBLIC_DNS" >> $GITHUB_ENV
          
          # Copy test Docker Compose file to instance
          scp -i ec2-key.pem -o StrictHostKeyChecking=no app/docker-compose-test.yml ec2-user@$PUBLIC_DNS:~/
          
          # SSH into the instance and run the tests
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$PUBLIC_DNS << EOF
            sudo yum install -y docker
            sudo service docker start
            sudo chkconfig docker on
            sudo usermod -aG docker ec2-user
            sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            newgrp docker
            docker --version
            docker-compose version

            aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.\$AWS_REGION.amazonaws.com
            docker-compose -f docker-compose-test.yml up -d
            sleep 10

            curl -o /dev/null -s -w "%{http_code}\n" http://localhost:5173/ | grep -q 200 || exit 1
          EOF


      # 13) Remove ECR images if tests fail
      - name: Remove ECR images if tests fail
        if: failure()
        run: |
          echo "Tests failed! Removing backend image from ECR..."
          aws ecr batch-delete-image --repository-name $ECR_REPO_BACKEND --image-ids imageTag=$IMAGE_TAG
          echo "Removing frontend image from ECR..."
          aws ecr batch-delete-image --repository-name $ECR_REPO_FRONTEND --image-ids imageTag=$IMAGE_TAG

      # 14) Terminate the EC2 instance and delete the key pair
      - name: Terminate EC2 instance
        if: always()
        run: |
          INSTANCE_ID="${{ steps.launch_ec2.outputs.instance_id }}"
          KEY_PAIR_NAME="${{ steps.launch_ec2.outputs.key_pair_name }}"
          if [ -z "$INSTANCE_ID" ]; then
            echo "No instance was launched; skipping termination."
          else
            echo "Terminating EC2 instance $INSTANCE_ID..."
            aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
            aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID"
            echo "EC2 instance terminated."
          fi
          echo "Deleting temporary key pair $KEY_PAIR_NAME..."
          aws ec2 delete-key-pair --key-name "$KEY_PAIR_NAME"
